'use strict'
/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */
var __assign =
	(this && this.__assign) ||
	function() {
		__assign =
			Object.assign ||
			function(t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i]
					for (var p in s)
						if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p]
				}
				return t
			}
		return __assign.apply(this, arguments)
	}
var __importDefault =
	(this && this.__importDefault) ||
	function(mod) {
		return mod && mod.__esModule ? mod : { default: mod }
	}
Object.defineProperty(exports, '__esModule', { value: true })
exports.trialStarted = exports.signedUp = exports.signedIn = exports.profileUpdated = exports.productViewed = exports.productAdded = exports.pageViewed = exports.orderCompleted = exports.emailLinkClicked = exports.cookiesReset = exports.buttonClicked = exports.setTypewriterOptions = exports.defaultValidationErrorHandler = void 0
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
var ajv_1 = __importDefault(require('ajv'))
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
var defaultValidationErrorHandler = function(message, violations) {
	var msg = JSON.stringify(
		{
			type: 'Typewriter JSON Schema Validation Error',
			description:
				'You made an analytics call ('.concat(
					message.event,
					") using Typewriter that doesn't match the "
				) + 'Tracking Plan spec.',
			errors: violations,
		},
		undefined,
		2
	)
	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	console.warn(msg)
}
exports.defaultValidationErrorHandler = defaultValidationErrorHandler
var onViolation = exports.defaultValidationErrorHandler
var missingAnalyticsNodeError = new Error(
	"You must set an analytics-node instance:\n\n>\tconst SegmentAnalytics = require('analytics-node')\n>\tconst { setTypewriterOptions } = require('./analytics')\n>\n>\tconst analytics = new SegmentAnalytics('SEGMENT_WRITE_KEY')\n>\tsetTypewriterOptions({\n>\t\tanalytics: analytics,\n>\t})\n\nFor more information on analytics-node, see: https://segment.com/docs/sources/server/node/quickstart/\n"
)
var analytics = function() {
	throw missingAnalyticsNodeError
}
/**
 * Updates the run-time configuration of this Typewriter client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {Segment.AnalyticsNode} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
function setTypewriterOptions(options) {
	analytics = options.analytics
		? function() {
				return options.analytics
		  }
		: analytics
	onViolation = options.onViolation || onViolation
}
exports.setTypewriterOptions = setTypewriterOptions
/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(message, schema) {
	var ajv = new ajv_1.default({
		schemaId: 'auto',
		allErrors: true,
		verbose: true,
	})
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))
	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message) {
	return __assign(__assign({}, message), {
		context: __assign(__assign({}, message.context || {}), {
			typewriter: {
				language: 'javascript',
				version: '7.4.1',
			},
		}),
	})
}
/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://segment.com/docs/spec/track/
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don’t know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */
/**
 * @typedef ButtonClicked
 * @property {string} button_color -
 * @property {string} [button_text] -
 * @property {string} [button_type] -
 */
/**
 * @typedef EmailLinkClicked
 * @property {string} [button_clicked_] -
 * @property {string} [campaign_name] -
 * @property {string} [email_subject] -
 */
/**
 * @typedef ProductsItem
 * @property {string} [category] -
 * @property {string} [duration] -
 * @property {string} [expiration_date] -
 * @property {number} [price] -
 * @property {number} [quantity] -
 * @property {string} [sku] -
 * @property {string} [start_date] -
 * @property {string} [variant] -
 */
/**
 * @typedef OrderCompleted
 * @property {number} [order_id] -
 * @property {string} [payment_method] -
 * @property {ProductsItem[]} [products] -
 * @property {number} [shipping] -
 * @property {number} [tax] -
 * @property {number} [total] -
 */
/**
 * @typedef Campaign
 * @property {string} [source] -
 */
/**
 * @typedef PageViewed
 * @property {Campaign} [campaign] -
 * @property {string} [name] -
 * @property {string} [path] -
 * @property {string} [referrer] -
 * @property {string} [search] -
 * @property {string} [title] -
 * @property {string} [url] -
 * @property {string} [utm_source] -
 */
/**
 * @typedef ProductAdded
 * @property {string} [category] -
 * @property {string} [duration] -
 * @property {string} [expiration_date] -
 * @property {string} [name] -
 * @property {number} [price] -
 * @property {number} [quantity] -
 * @property {string} [sku] -
 * @property {string} [start_date] -
 * @property {string} [variant] -
 */
/**
 * @typedef ProductViewed
 * @property {string} [category] -
 * @property {string} [duration] -
 * @property {string} [expiration_date] -
 * @property {number} [price] -
 * @property {number} [quantity] -
 * @property {string} [sku] -
 * @property {string} [start_date] -
 * @property {string} [variant] -
 */
/**
 * @typedef SignedUp
 * @property {string} [account_type] -
 * @property {Record<string, any>} [newprop] -
 * @property {string} [signup_type] -
 */
/**
 * @typedef TrialStarted
 * @property {string} [trial_end_date] -
 * @property {string} [trial_plan_name] -
 * @property {string} [trial_start_date] -
 */
/**
 * Fires a 'Button Clicked' track call.
 *
 * @param {TrackMessage<ButtonClicked>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function buttonClicked(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Button Clicked' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					button_color: {
						type: ['string'],
					},
					button_text: {
						type: ['string'],
					},
					button_type: {
						type: ['string'],
					},
				},
				required: ['button_color'],
				type: 'object',
			},
			traits: {},
		},
		required: ['properties'],
		title: 'Button Clicked',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.buttonClicked = buttonClicked
/**
 * Fires a 'Cookies Reset' track call.
 *
 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function cookiesReset(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Cookies Reset' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {},
		},
		title: 'Cookies Reset',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.cookiesReset = cookiesReset
/**
 * Fires a 'Email Link Clicked' track call.
 *
 * @param {TrackMessage<EmailLinkClicked>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function emailLinkClicked(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), {
			event: 'Email Link Clicked',
		})
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					button_clicked_: {
						type: ['string'],
					},
					campaign_name: {
						type: ['string'],
					},
					email_subject: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Email Link Clicked',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.emailLinkClicked = emailLinkClicked
/**
 * Fires a 'Order Completed' track call.
 *
 * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function orderCompleted(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), {
			event: 'Order Completed',
		})
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					order_id: {
						type: ['integer'],
					},
					payment_method: {
						type: ['string'],
					},
					products: {
						items: {
							properties: {
								category: {
									type: ['string'],
								},
								duration: {
									type: ['string'],
								},
								expiration_date: {
									type: ['string'],
								},
								price: {
									type: ['integer'],
								},
								quantity: {
									type: ['integer'],
								},
								sku: {
									type: ['string'],
								},
								start_date: {
									type: ['string'],
								},
								variant: {
									type: ['string'],
								},
							},
							type: 'object',
						},
						type: 'array',
					},
					shipping: {
						type: ['integer'],
					},
					tax: {
						type: ['integer'],
					},
					total: {
						type: ['integer'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Order Completed',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.orderCompleted = orderCompleted
/**
 * Fires a 'Page Viewed' track call.
 *
 * @param {TrackMessage<PageViewed>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function pageViewed(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Page Viewed' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					campaign: {
						properties: {
							source: {
								type: ['string'],
							},
						},
						type: 'object',
					},
					name: {
						type: ['string'],
					},
					path: {
						type: ['string'],
					},
					referrer: {
						type: ['string'],
					},
					search: {
						type: ['string'],
					},
					title: {
						type: ['string'],
					},
					url: {
						type: ['string'],
					},
					utm_source: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Page Viewed',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.pageViewed = pageViewed
/**
 * Fires a 'Product Added' track call.
 *
 * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function productAdded(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Product Added' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					category: {
						type: ['string'],
					},
					duration: {
						type: ['string'],
					},
					expiration_date: {
						type: ['string'],
					},
					name: {
						type: ['string'],
					},
					price: {
						type: ['integer'],
					},
					quantity: {
						type: ['integer'],
					},
					sku: {
						type: ['string'],
					},
					start_date: {
						type: ['string'],
					},
					variant: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Product Added',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.productAdded = productAdded
/**
 * Fires a 'Product Viewed' track call.
 *
 * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function productViewed(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Product Viewed' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					category: {
						type: ['string'],
					},
					duration: {
						type: ['string'],
					},
					expiration_date: {
						type: ['string'],
					},
					price: {
						type: ['integer'],
					},
					quantity: {
						type: ['integer'],
					},
					sku: {
						type: ['string'],
					},
					start_date: {
						type: ['string'],
					},
					variant: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Product Viewed',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.productViewed = productViewed
/**
 * Fires a 'Profile Updated' track call.
 *
 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function profileUpdated(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), {
			event: 'Profile Updated',
		})
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {},
		},
		title: 'Profile Updated',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.profileUpdated = profileUpdated
/**
 * Fires a 'Signed In' track call.
 *
 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function signedIn(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Signed In' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {},
		},
		title: 'Signed In',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.signedIn = signedIn
/**
 * Fires a 'Signed Up' track call.
 *
 * @param {TrackMessage<SignedUp>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function signedUp(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Signed Up' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					account_type: {
						type: ['string'],
					},
					newprop: {
						description: '',
						type: 'object',
					},
					signup_type: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Signed Up',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.signedUp = signedUp
/**
 * Fires a 'Trial Started' track call.
 *
 * @param {TrackMessage<TrialStarted>} message - The analytics properties that will be sent to Segment.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
function trialStarted(message, callback) {
	var msg = withTypewriterContext(
		__assign(__assign({ properties: {} }, message), { event: 'Trial Started' })
	)
	var schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			properties: {
				properties: {
					trial_end_date: {
						type: ['string'],
					},
					trial_plan_name: {
						type: ['string'],
					},
					trial_start_date: {
						type: ['string'],
					},
				},
				type: 'object',
			},
			traits: {},
		},
		title: 'Trial Started',
		type: 'object',
	}
	validateAgainstSchema(msg, schema)
	var a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
exports.trialStarted = trialStarted
var clientAPI = {
	/**
	 * Updates the run-time configuration of this Typewriter client.
	 * This function must be called with a configured analytics-node instance before firing
	 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
	 *
	 * @param {TypewriterOptions} options - the options to upsert
	 *
	 * @typedef {Object} TypewriterOptions
	 * @property {Segment.AnalyticsNode} analytics - Underlying analytics instance where analytics
	 * 		calls are forwarded on to.
	 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
	 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
	 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
	 * 		will be logged to stderr.
	 */
	setTypewriterOptions: setTypewriterOptions,
	/**
	 * Fires a 'Button Clicked' track call.
	 *
	 * @param {TrackMessage<ButtonClicked>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	buttonClicked: buttonClicked,
	/**
	 * Fires a 'Cookies Reset' track call.
	 *
	 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	cookiesReset: cookiesReset,
	/**
	 * Fires a 'Email Link Clicked' track call.
	 *
	 * @param {TrackMessage<EmailLinkClicked>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailLinkClicked: emailLinkClicked,
	/**
	 * Fires a 'Order Completed' track call.
	 *
	 * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	orderCompleted: orderCompleted,
	/**
	 * Fires a 'Page Viewed' track call.
	 *
	 * @param {TrackMessage<PageViewed>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	pageViewed: pageViewed,
	/**
	 * Fires a 'Product Added' track call.
	 *
	 * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	productAdded: productAdded,
	/**
	 * Fires a 'Product Viewed' track call.
	 *
	 * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	productViewed: productViewed,
	/**
	 * Fires a 'Profile Updated' track call.
	 *
	 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	profileUpdated: profileUpdated,
	/**
	 * Fires a 'Signed In' track call.
	 *
	 * @param {TrackMessage<Record<string, any>>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	signedIn: signedIn,
	/**
	 * Fires a 'Signed Up' track call.
	 *
	 * @param {TrackMessage<SignedUp>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	signedUp: signedUp,
	/**
	 * Fires a 'Trial Started' track call.
	 *
	 * @param {TrackMessage<TrialStarted>} message - The analytics properties that will be sent to Segment.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	trialStarted: trialStarted,
}
exports.default = new Proxy(clientAPI, {
	get: function(target, method) {
		if (typeof method === 'string' && target.hasOwnProperty(method)) {
			return target[method]
		}
		return function() {
			console.warn(
				'\u26A0\uFE0F  You made an analytics call ('.concat(
					String(method),
					") that can't be found. Either:\n    a) Re-generate your typewriter client: `npx typewriter`\n    b) Add it to your Tracking Plan: https://app.segment.com/jslite-sandbox/protocols/tracking-plans/rs_1qAbumNrJVHZzmdYrROxfRL7bMX"
				)
			)
			var a = analytics()
			if (a) {
				a.track(
					withTypewriterContext({
						event: 'Unknown Analytics Call Fired',
						properties: {
							method: method,
						},
						userId: 'typewriter',
					})
				)
			}
		}
	},
})
